/* The following code was generated by JFlex 1.4.1 on 10-Oct-06 1:27:45  */

/*
 * Copyright 2000-2006 Omnicore Software, Hans Kratz & Dennis Strein GbR,
 *                     Geert Bevin <gbevin[remove] at uwyn dot com>.
 * Distributed under the terms of either:
 * - the common development and distribution license (CDDL), v1.0; or
 * - the GNU Lesser General Public License, v2.1 or later
 * $Id$
 */
package com.uwyn.jhighlight.highlighter;

import java.io.Reader;
import java.io.IOException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 10-Oct-06 1:27:45  from the specification file
 * <tt>/home/matthew/Inquisition/jhighlight-1.0-src/src/com/uwyn/jhighlight/highlighter/JavaHighlighter.flex</tt>
 */
public class JavaHighlighter implements ExplicitStateHighlighter {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 128;

  /** lexical states */
  public static final int IN_INQUISITION_TAG = 3;
  public static final int IN_INQUISITION_INPUT = 4;
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 1;
  public static final int IN_JAVA_DOC_COMMENT = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\4\1\0\1\50\1\0\1\0\1\0\16\4\4\0\1\0\1\54"+
    "\1\47\1\0\1\2\1\54\1\54\1\52\1\53\1\53\1\57\1\24"+
    "\1\53\1\24\1\21\1\60\1\6\7\15\2\1\1\54\1\53\1\56"+
    "\1\54\1\55\1\54\1\61\3\14\1\17\1\23\1\17\2\5\1\62"+
    "\2\5\1\10\1\5\1\63\1\5\1\64\3\5\1\66\1\65\2\5"+
    "\1\12\2\5\1\53\1\51\1\53\1\54\1\3\1\0\1\30\1\31"+
    "\1\13\1\20\1\22\1\16\1\45\1\36\1\40\1\2\1\35\1\7"+
    "\1\27\1\25\1\37\1\42\1\2\1\34\1\32\1\33\1\26\1\43"+
    "\1\44\1\11\1\41\1\46\1\53\1\54\1\53\1\54\41\4\2\0"+
    "\4\2\4\0\1\2\12\0\1\2\4\0\1\2\5\0\27\2\1\0"+
    "\37\2\1\0\u0128\2\2\0\22\2\34\0\136\2\2\0\11\2\2\0"+
    "\7\2\16\0\2\2\16\0\5\2\11\0\1\2\21\0\117\4\21\0"+
    "\3\4\27\0\1\2\13\0\1\2\1\0\3\2\1\0\1\2\1\0"+
    "\24\2\1\0\54\2\1\0\10\2\2\0\32\2\14\0\202\2\1\0"+
    "\4\4\5\0\71\2\2\0\2\2\2\0\2\2\3\0\46\2\2\0"+
    "\2\2\67\0\46\2\2\0\1\2\7\0\47\2\11\0\21\4\1\0"+
    "\27\4\1\0\3\4\1\0\1\4\1\0\2\4\1\0\1\4\13\0"+
    "\33\2\5\0\3\2\56\0\32\2\5\0\13\2\13\4\12\0\12\4"+
    "\6\0\1\4\143\2\1\0\1\2\7\4\2\0\6\4\2\2\2\4"+
    "\1\0\4\4\2\0\12\4\3\2\22\0\1\4\1\2\1\4\33\2"+
    "\3\0\33\4\65\0\46\2\13\4\u0150\0\3\4\1\0\65\2\2\0"+
    "\1\4\1\2\20\4\2\0\1\2\4\4\3\0\12\2\2\4\2\0"+
    "\12\4\21\0\3\4\1\0\10\2\2\0\2\2\2\0\26\2\1\0"+
    "\7\2\1\0\1\2\3\0\4\2\2\0\1\4\1\0\7\4\2\0"+
    "\2\4\2\0\3\4\11\0\1\4\4\0\2\2\1\0\3\2\2\4"+
    "\2\0\12\4\4\2\16\0\1\4\2\0\6\2\4\0\2\2\2\0"+
    "\26\2\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2\2\0"+
    "\1\4\1\0\5\4\4\0\2\4\2\0\3\4\13\0\4\2\1\0"+
    "\1\2\7\0\14\4\3\2\14\0\3\4\1\0\7\2\1\0\1\2"+
    "\1\0\3\2\1\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2"+
    "\2\0\1\4\1\2\10\4\1\0\3\4\1\0\3\4\2\0\1\2"+
    "\17\0\1\2\5\0\12\4\21\0\3\4\1\0\10\2\2\0\2\2"+
    "\2\0\26\2\1\0\7\2\1\0\2\2\2\0\4\2\2\0\1\4"+
    "\1\2\6\4\3\0\2\4\2\0\3\4\10\0\2\4\4\0\2\2"+
    "\1\0\3\2\4\0\12\4\22\0\2\4\1\0\6\2\3\0\3\2"+
    "\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2\3\0\2\2"+
    "\3\0\3\2\3\0\10\2\1\0\3\2\4\0\5\4\3\0\3\4"+
    "\1\0\4\4\11\0\1\4\17\0\11\4\21\0\3\4\1\0\10\2"+
    "\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2\4\0\7\4"+
    "\1\0\3\4\1\0\4\4\7\0\2\4\11\0\2\2\4\0\12\4"+
    "\22\0\2\4\1\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2"+
    "\1\0\5\2\4\0\7\4\1\0\3\4\1\0\4\4\7\0\2\4"+
    "\7\0\1\2\1\0\2\2\4\0\12\4\22\0\2\4\1\0\10\2"+
    "\1\0\3\2\1\0\27\2\1\0\20\2\4\0\6\4\2\0\3\4"+
    "\1\0\4\4\11\0\1\4\10\0\2\2\4\0\12\4\22\0\2\4"+
    "\1\0\22\2\3\0\30\2\1\0\11\2\1\0\1\2\2\0\7\2"+
    "\3\0\1\4\4\0\6\4\1\0\1\4\1\0\10\4\22\0\2\4"+
    "\15\0\60\2\1\4\2\2\7\4\4\0\10\2\10\4\1\0\12\4"+
    "\47\0\2\2\1\0\1\2\2\0\2\2\1\0\1\2\2\0\1\2"+
    "\6\0\4\2\1\0\7\2\1\0\3\2\1\0\1\2\1\0\1\2"+
    "\2\0\2\2\1\0\4\2\1\4\2\2\6\4\1\0\2\4\1\2"+
    "\2\0\5\2\1\0\1\2\1\0\6\4\2\0\12\4\2\0\2\2"+
    "\42\0\1\2\27\0\2\4\6\0\12\4\13\0\1\4\1\0\1\4"+
    "\1\0\1\4\4\0\2\4\10\2\1\0\42\2\6\0\24\4\1\0"+
    "\2\4\4\2\4\0\10\4\1\0\44\4\11\0\1\4\71\0\42\2"+
    "\1\0\5\2\1\0\2\2\1\0\7\4\3\0\4\4\6\0\12\4"+
    "\6\0\6\2\4\4\106\0\46\2\12\0\47\2\11\0\132\2\5\0"+
    "\104\2\5\0\122\2\6\0\7\2\1\0\77\2\1\0\1\2\1\0"+
    "\4\2\2\0\7\2\1\0\1\2\1\0\4\2\2\0\47\2\1\0"+
    "\1\2\1\0\4\2\2\0\37\2\1\0\1\2\1\0\4\2\2\0"+
    "\7\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\7\2\1\0"+
    "\27\2\1\0\37\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0"+
    "\47\2\1\0\23\2\16\0\11\4\56\0\125\2\14\0\u026c\2\2\0"+
    "\10\2\12\0\32\2\5\0\113\2\225\0\64\2\40\4\7\0\1\2"+
    "\4\0\12\4\41\0\4\4\1\0\12\4\6\0\130\2\10\0\51\2"+
    "\1\4\u0556\0\234\2\4\0\132\2\6\0\26\2\2\0\6\2\2\0"+
    "\46\2\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0"+
    "\3\2\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0"+
    "\3\2\1\0\7\2\17\0\4\4\32\0\5\4\20\0\2\2\51\0"+
    "\6\4\17\0\1\2\40\0\20\2\40\0\15\4\4\0\1\4\40\0"+
    "\1\2\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\4\2\1\0\3\2\1\0"+
    "\7\2\46\0\44\2\u0e81\0\3\2\31\0\11\2\6\4\1\0\5\2"+
    "\2\0\3\2\6\0\124\2\4\0\2\4\2\0\2\2\2\0\136\2"+
    "\6\0\50\2\4\0\136\2\21\0\30\2\u0248\0\u19b6\2\112\0\u51a6\2"+
    "\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0\u012e\2\322\0\7\2\14\0\5\2"+
    "\5\0\1\2\1\4\12\2\1\0\15\2\1\0\5\2\1\0\1\2"+
    "\1\0\2\2\1\0\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2"+
    "\2\0\66\2\50\0\14\2\44\0\4\4\17\0\2\2\30\0\3\2"+
    "\31\0\1\2\6\0\3\2\1\0\1\2\1\0\207\2\2\0\1\4"+
    "\4\0\1\2\13\0\12\4\7\0\32\2\4\0\1\2\1\0\32\2"+
    "\12\0\132\2\3\0\6\2\2\0\6\2\2\0\6\2\2\0\3\2"+
    "\3\0\2\2\3\0\2\2\22\0\3\4\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\2\3\1\4\4\3"+
    "\1\5\1\3\1\6\15\3\1\5\2\6\1\7\1\3"+
    "\1\10\1\3\2\11\1\1\1\12\1\2\1\13\1\3"+
    "\3\4\1\0\1\3\1\14\4\4\12\3\1\15\23\3"+
    "\1\15\10\3\5\0\1\16\3\0\1\17\1\20\1\4"+
    "\1\0\1\4\40\3\1\14\11\3\1\0\1\21\1\14"+
    "\10\3\1\4\23\3\1\0\1\3\1\15\11\3\1\15"+
    "\7\3\1\0\3\3\1\22\10\3\1\23\15\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0113\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u0113\0\u063b"+
    "\0\u0672\0\u0113\0\u06a9\0\u0113\0\u06e0\0\u0113\0\u0717\0\u074e"+
    "\0\u0113\0\u0785\0\u0113\0\u07bc\0\u0113\0\u07bc\0\u07f3\0\u082a"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a"+
    "\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52"+
    "\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a"+
    "\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u0181\0\u101d\0\u1054\0\u108b"+
    "\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u05cd\0\u11d5\0\u0604"+
    "\0\u120c\0\u1243\0\u127a\0\u12b1\0\u06a9\0\u06e0\0\u0113\0\u0113"+
    "\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469"+
    "\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621"+
    "\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9"+
    "\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991"+
    "\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49"+
    "\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u0181"+
    "\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82"+
    "\0\u0181\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003"+
    "\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb"+
    "\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373"+
    "\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b"+
    "\0\u19c8\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac"+
    "\0\u26e3\0\u271a\0\u2751\0\u2788\0\u0181\0\u27bf\0\u27f6\0\u282d"+
    "\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u0113\0\u2977\0\u29ae"+
    "\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66"+
    "\0\u2b9d\0\u2bd4\0\u2c0b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\2\10\1\6\1\11\1\12\1\13\1\11"+
    "\1\10\1\11\1\14\1\11\1\7\1\15\1\11\1\16"+
    "\1\17\1\20\1\11\1\21\1\22\2\10\1\23\1\24"+
    "\1\25\1\26\1\27\3\10\1\30\1\10\1\31\1\32"+
    "\1\33\1\34\1\10\1\35\2\6\1\36\1\37\2\21"+
    "\1\40\1\21\1\41\1\42\5\11\50\43\1\44\6\43"+
    "\1\45\7\43\57\46\1\47\7\46\50\50\1\6\10\50"+
    "\1\51\5\50\50\52\1\6\4\52\1\53\11\52\70\0"+
    "\1\7\1\0\1\54\1\0\1\54\1\7\1\55\1\56"+
    "\1\0\1\54\1\0\1\54\1\7\1\55\1\56\1\55"+
    "\1\57\1\60\1\61\36\0\5\54\1\0\20\10\1\0"+
    "\2\10\1\0\22\10\13\0\5\10\1\0\1\11\1\62"+
    "\1\11\1\62\2\11\1\62\1\11\1\62\1\11\1\62"+
    "\2\11\1\62\1\11\1\62\1\0\1\62\1\11\1\0"+
    "\22\62\13\0\5\11\1\0\1\63\1\0\1\54\1\0"+
    "\1\54\1\64\1\55\1\56\1\65\1\66\1\0\1\54"+
    "\1\64\1\55\1\56\1\55\1\57\1\60\1\61\36\0"+
    "\5\54\1\0\20\10\1\0\2\10\1\0\12\10\1\67"+
    "\7\10\13\0\5\10\1\0\6\10\1\70\11\10\1\0"+
    "\2\10\1\0\3\10\1\71\5\10\1\72\1\73\7\10"+
    "\13\0\5\10\1\0\6\10\1\74\11\10\1\0\2\10"+
    "\1\0\3\10\1\75\6\10\1\76\1\77\6\10\13\0"+
    "\5\10\1\0\20\10\1\0\1\100\1\10\1\0\12\10"+
    "\1\101\7\10\13\0\5\10\1\0\1\57\4\0\1\57"+
    "\6\0\1\57\52\0\6\10\1\102\1\10\1\103\7\10"+
    "\1\0\2\10\1\0\1\104\21\10\13\0\5\10\1\0"+
    "\20\10\1\0\1\105\1\10\1\0\1\10\1\106\1\10"+
    "\1\107\16\10\13\0\5\10\1\0\20\10\1\0\2\10"+
    "\1\0\4\10\1\110\1\111\14\10\13\0\5\10\1\0"+
    "\20\10\1\0\2\10\1\0\7\10\1\112\2\10\1\113"+
    "\1\10\1\114\5\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\1\10\1\115\4\10\1\116\2\10\1\117"+
    "\2\10\1\120\2\10\1\121\2\10\13\0\5\10\1\0"+
    "\20\10\1\0\2\10\1\0\7\10\1\122\1\10\1\123"+
    "\10\10\13\0\5\10\1\0\20\10\1\0\1\124\1\10"+
    "\1\0\22\10\13\0\5\10\1\0\15\10\1\125\2\10"+
    "\1\0\2\10\1\0\1\126\1\10\1\127\17\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\1\10\1\130"+
    "\1\10\1\131\3\10\1\132\12\10\13\0\5\10\1\0"+
    "\20\10\1\0\2\10\1\0\12\10\1\133\7\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\11\10\1\134"+
    "\10\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\12\10\1\135\7\10\13\0\5\10\47\136\2\55\1\137"+
    "\15\136\50\140\1\55\1\141\1\55\14\140\40\0\1\142"+
    "\21\0\1\142\63\0\1\143\1\144\6\0\50\145\1\44"+
    "\6\145\1\146\57\145\1\44\6\145\1\146\1\147\6\145"+
    "\60\0\1\150\6\0\50\50\1\0\10\50\1\0\5\50"+
    "\50\52\1\0\4\52\1\0\11\52\1\0\1\54\1\0"+
    "\1\54\1\0\2\54\1\0\1\54\1\0\1\54\1\0"+
    "\2\54\1\0\1\54\3\0\1\54\36\0\5\54\1\0"+
    "\1\57\4\0\1\57\6\0\1\57\3\55\1\0\2\60"+
    "\44\0\1\151\4\0\1\151\6\0\1\151\6\0\1\152"+
    "\43\0\1\153\1\0\1\54\1\0\1\54\1\153\1\0"+
    "\1\54\1\0\1\54\1\0\1\54\1\153\1\0\1\54"+
    "\3\0\1\54\1\152\35\0\5\54\1\0\20\62\1\0"+
    "\2\62\1\0\22\62\13\0\5\62\1\0\1\63\1\0"+
    "\1\54\1\0\1\54\1\63\1\0\1\54\1\0\1\54"+
    "\1\0\1\54\1\63\1\55\1\56\1\55\1\57\1\60"+
    "\1\61\36\0\5\54\1\0\1\63\1\0\1\54\1\0"+
    "\1\54\1\64\1\55\1\56\1\0\1\54\1\0\1\54"+
    "\1\64\1\55\1\56\1\55\1\57\1\60\1\61\36\0"+
    "\5\54\1\0\1\65\4\0\1\65\2\55\2\0\6\65"+
    "\1\0\2\65\4\0\2\65\36\0\1\66\1\0\1\54"+
    "\1\0\1\54\1\66\1\55\1\56\1\0\1\54\1\65"+
    "\2\66\1\65\1\66\1\65\1\0\1\65\1\66\4\0"+
    "\2\65\30\0\5\54\1\0\20\10\1\0\2\10\1\0"+
    "\1\154\21\10\13\0\5\10\1\0\20\10\1\0\2\10"+
    "\1\0\3\10\1\155\16\10\13\0\5\10\1\0\20\10"+
    "\1\0\2\10\1\0\5\10\1\156\1\157\13\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\3\10\1\160"+
    "\16\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\1\161\21\10\13\0\5\10\1\0\20\10\1\0\2\10"+
    "\1\0\12\10\1\162\7\10\13\0\5\10\1\0\6\10"+
    "\1\163\11\10\1\0\2\10\1\0\22\10\13\0\5\10"+
    "\1\0\20\10\1\0\2\10\1\0\7\10\1\125\12\10"+
    "\13\0\5\10\1\0\20\10\1\0\2\10\1\0\1\164"+
    "\21\10\13\0\5\10\1\0\15\10\1\165\2\10\1\0"+
    "\2\10\1\0\22\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\1\10\1\166\20\10\13\0\5\10\1\0"+
    "\20\10\1\0\2\10\1\0\5\10\1\156\14\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\6\10\1\167"+
    "\13\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\1\10\1\170\20\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\17\10\1\125\2\10\13\0\5\10\1\0"+
    "\6\10\1\171\11\10\1\0\2\10\1\0\22\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\6\10\1\172"+
    "\13\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\5\10\1\173\14\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\5\10\1\174\14\10\13\0\5\10\1\0"+
    "\20\10\1\0\1\175\1\10\1\0\22\10\13\0\5\10"+
    "\1\0\20\10\1\0\2\10\1\0\12\10\1\176\7\10"+
    "\13\0\5\10\1\0\20\10\1\0\2\10\1\0\6\10"+
    "\1\177\13\10\13\0\5\10\1\0\20\10\1\0\2\10"+
    "\1\0\15\10\1\200\4\10\13\0\5\10\1\0\20\10"+
    "\1\0\2\10\1\0\3\10\1\201\3\10\1\202\12\10"+
    "\13\0\5\10\1\0\20\10\1\0\2\10\1\0\12\10"+
    "\1\203\7\10\13\0\5\10\1\0\20\10\1\0\2\10"+
    "\1\0\1\204\21\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\13\10\1\205\6\10\13\0\5\10\1\0"+
    "\20\10\1\0\2\10\1\0\1\10\1\206\1\10\1\207"+
    "\10\10\1\125\5\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\7\10\1\210\3\10\1\211\6\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\6\10\1\212"+
    "\13\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\5\10\1\213\1\214\13\10\13\0\5\10\1\0\20\10"+
    "\1\0\2\10\1\0\15\10\1\215\4\10\13\0\5\10"+
    "\1\0\20\10\1\0\2\10\1\0\4\10\1\216\15\10"+
    "\13\0\5\10\1\0\12\10\1\217\5\10\1\0\2\10"+
    "\1\0\22\10\13\0\5\10\1\0\20\10\1\0\2\10"+
    "\1\0\12\10\1\220\1\221\6\10\13\0\5\10\1\0"+
    "\6\10\1\222\11\10\1\0\2\10\1\0\13\10\1\223"+
    "\6\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\13\10\1\224\6\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\6\10\1\225\13\10\13\0\5\10\50\136"+
    "\1\55\16\136\50\140\1\55\16\140\25\0\1\226\35\0"+
    "\1\226\62\0\1\227\7\0\50\144\1\44\16\144\1\0"+
    "\1\151\4\0\1\151\6\0\1\151\3\55\47\0\1\151"+
    "\4\0\1\151\6\0\1\151\52\0\1\153\1\0\1\54"+
    "\1\0\1\54\1\153\1\0\1\54\1\0\1\54\1\0"+
    "\1\54\1\153\1\55\1\56\1\55\2\0\1\54\36\0"+
    "\5\54\1\0\20\10\1\0\2\10\1\0\20\10\1\230"+
    "\1\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\5\10\1\211\14\10\13\0\5\10\1\0\20\10\1\0"+
    "\1\125\1\10\1\0\22\10\13\0\5\10\1\0\12\10"+
    "\1\231\5\10\1\0\2\10\1\0\22\10\13\0\5\10"+
    "\1\0\20\10\1\0\2\10\1\0\7\10\1\230\12\10"+
    "\13\0\5\10\1\0\20\10\1\0\2\10\1\0\5\10"+
    "\1\232\1\233\13\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\3\10\1\234\16\10\13\0\5\10\1\0"+
    "\20\10\1\0\2\10\1\0\5\10\1\206\14\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\3\10\1\235"+
    "\16\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\3\10\1\236\16\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\4\10\1\237\15\10\13\0\5\10\1\0"+
    "\20\10\1\0\1\240\1\10\1\0\22\10\13\0\5\10"+
    "\1\0\20\10\1\0\2\10\1\0\2\10\1\125\17\10"+
    "\13\0\5\10\1\0\6\10\1\241\11\10\1\0\2\10"+
    "\1\0\22\10\13\0\5\10\1\0\20\10\1\0\2\10"+
    "\1\0\13\10\1\242\6\10\13\0\5\10\1\0\20\10"+
    "\1\0\2\10\1\0\6\10\1\243\13\10\13\0\5\10"+
    "\1\0\20\10\1\0\1\244\1\10\1\0\22\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\3\10\1\245"+
    "\16\10\13\0\5\10\1\0\6\10\1\246\11\10\1\0"+
    "\2\10\1\0\22\10\13\0\5\10\1\0\20\10\1\0"+
    "\1\230\1\10\1\0\22\10\13\0\5\10\1\0\20\10"+
    "\1\0\1\76\1\10\1\0\22\10\13\0\5\10\1\0"+
    "\20\10\1\0\2\10\1\0\6\10\1\247\13\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\13\10\1\250"+
    "\6\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\7\10\1\234\12\10\13\0\5\10\1\0\12\10\1\251"+
    "\5\10\1\0\2\10\1\0\22\10\13\0\5\10\1\0"+
    "\20\10\1\0\2\10\1\0\6\10\1\157\13\10\13\0"+
    "\5\10\1\0\20\10\1\0\1\241\1\10\1\0\22\10"+
    "\13\0\5\10\1\0\20\10\1\0\2\10\1\0\1\252"+
    "\21\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\12\10\1\253\7\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\5\10\1\125\14\10\13\0\5\10\1\0"+
    "\20\10\1\0\2\10\1\0\1\10\1\254\20\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\6\10\1\255"+
    "\13\10\13\0\5\10\1\0\20\10\1\0\1\256\1\10"+
    "\1\0\22\10\13\0\5\10\1\0\6\10\1\257\11\10"+
    "\1\0\2\10\1\0\12\10\1\260\7\10\13\0\5\10"+
    "\1\0\6\10\1\247\11\10\1\0\2\10\1\0\22\10"+
    "\13\0\5\10\1\0\20\10\1\0\2\10\1\0\10\10"+
    "\1\261\11\10\13\0\5\10\1\0\20\10\1\0\2\10"+
    "\1\0\6\10\1\262\13\10\13\0\5\10\1\0\20\10"+
    "\1\0\2\10\1\0\16\10\1\263\3\10\13\0\5\10"+
    "\1\0\20\10\1\0\2\10\1\0\3\10\1\264\16\10"+
    "\13\0\5\10\1\0\17\10\1\230\1\0\2\10\1\0"+
    "\22\10\13\0\5\10\1\0\6\10\1\156\11\10\1\0"+
    "\2\10\1\0\22\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\12\10\1\125\7\10\13\0\5\10\42\0"+
    "\1\265\21\0\1\265\62\0\1\44\7\0\20\10\1\0"+
    "\2\10\1\0\11\10\1\125\10\10\13\0\5\10\1\0"+
    "\20\10\1\0\2\10\1\0\6\10\1\125\13\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\13\10\1\266"+
    "\6\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\6\10\1\230\13\10\13\0\5\10\1\0\6\10\1\267"+
    "\11\10\1\0\2\10\1\0\22\10\13\0\5\10\1\0"+
    "\20\10\1\0\2\10\1\0\1\10\1\270\20\10\13\0"+
    "\5\10\1\0\6\10\1\177\11\10\1\0\2\10\1\0"+
    "\22\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\1\271\21\10\13\0\5\10\1\0\20\10\1\0\2\10"+
    "\1\0\16\10\1\156\3\10\13\0\5\10\1\0\20\10"+
    "\1\0\2\10\1\0\7\10\1\272\12\10\13\0\5\10"+
    "\1\0\20\10\1\0\2\10\1\0\7\10\1\273\12\10"+
    "\13\0\5\10\1\0\20\10\1\0\2\10\1\0\10\10"+
    "\1\125\11\10\13\0\5\10\1\0\20\10\1\0\1\274"+
    "\1\10\1\0\22\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\13\10\1\275\6\10\13\0\5\10\1\0"+
    "\12\10\1\276\5\10\1\0\2\10\1\0\22\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\11\10\1\277"+
    "\10\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\5\10\1\300\14\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\17\10\1\301\2\10\13\0\5\10\1\0"+
    "\20\10\1\0\2\10\1\0\7\10\1\302\12\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\3\10\1\303"+
    "\16\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\7\10\1\304\12\10\13\0\5\10\1\0\20\10\1\0"+
    "\1\305\1\10\1\0\22\10\13\0\5\10\1\0\20\10"+
    "\1\0\2\10\1\0\7\10\1\232\12\10\13\0\5\10"+
    "\1\0\20\10\1\0\2\10\1\0\3\10\1\306\16\10"+
    "\13\0\5\10\1\0\20\10\1\0\1\307\1\10\1\0"+
    "\22\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\3\10\1\310\16\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\6\10\1\134\13\10\13\0\5\10\26\0"+
    "\1\311\36\0\1\311\2\0\20\10\1\0\2\10\1\0"+
    "\1\312\21\10\13\0\5\10\1\0\6\10\1\313\11\10"+
    "\1\0\2\10\1\0\22\10\13\0\5\10\1\0\6\10"+
    "\1\232\11\10\1\0\2\10\1\0\22\10\13\0\5\10"+
    "\1\0\17\10\1\211\1\0\2\10\1\0\22\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\3\10\1\314"+
    "\16\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\6\10\1\315\13\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\3\10\1\316\16\10\13\0\5\10\1\0"+
    "\12\10\1\125\5\10\1\0\2\10\1\0\22\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\6\10\1\317"+
    "\13\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\7\10\1\320\12\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\13\10\1\321\6\10\13\0\5\10\1\0"+
    "\20\10\1\0\2\10\1\0\1\125\21\10\13\0\5\10"+
    "\1\0\20\10\1\0\2\10\1\0\1\322\21\10\13\0"+
    "\5\10\1\0\15\10\1\323\2\10\1\0\2\10\1\0"+
    "\22\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\324\17\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\20\10\1\156\1\10\13\0\5\10\1\0"+
    "\12\10\1\325\5\10\1\0\2\10\1\0\22\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\6\10\1\156"+
    "\13\10\13\0\5\10\33\0\1\326\32\0\1\326\1\0"+
    "\20\10\1\0\2\10\1\0\1\10\1\156\20\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\14\10\1\125"+
    "\5\10\13\0\5\10\1\0\12\10\1\232\5\10\1\0"+
    "\2\10\1\0\22\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\1\230\21\10\13\0\5\10\1\0\15\10"+
    "\1\327\2\10\1\0\2\10\1\0\22\10\13\0\5\10"+
    "\1\0\20\10\1\0\2\10\1\0\12\10\1\330\7\10"+
    "\13\0\5\10\1\0\20\10\1\0\1\331\1\10\1\0"+
    "\22\10\13\0\5\10\1\0\12\10\1\332\5\10\1\0"+
    "\2\10\1\0\22\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\3\10\1\333\16\10\13\0\5\10\1\0"+
    "\20\10\1\0\1\334\1\10\1\0\22\10\13\0\5\10"+
    "\1\0\20\10\1\0\2\10\1\0\6\10\1\335\13\10"+
    "\13\0\5\10\1\0\20\10\1\0\2\10\1\0\15\10"+
    "\1\125\4\10\13\0\5\10\1\0\20\10\1\0\2\10"+
    "\1\0\1\336\21\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\1\232\21\10\13\0\5\10\1\0\20\10"+
    "\1\0\1\337\1\10\1\0\22\10\13\0\5\10\1\0"+
    "\12\10\1\156\5\10\1\0\2\10\1\0\22\10\13\0"+
    "\5\10\1\0\20\10\1\0\2\10\1\0\1\340\21\10"+
    "\13\0\5\10\1\0\20\10\1\0\1\341\1\10\1\0"+
    "\22\10\13\0\5\10\1\0\20\10\1\0\2\10\1\0"+
    "\13\10\1\342\6\10\13\0\5\10\1\0\20\10\1\0"+
    "\2\10\1\0\12\10\1\343\7\10\13\0\5\10\1\0"+
    "\20\10\1\0\2\10\1\0\6\10\1\211\13\10\13\0"+
    "\5\10\1\0\17\10\1\125\1\0\2\10\1\0\22\10"+
    "\13\0\5\10\1\0\20\10\1\0\2\10\1\0\21\10"+
    "\1\335\13\0\5\10\1\0\15\10\1\125\2\10\1\0"+
    "\2\10\1\0\22\10\13\0\5\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11330];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\1\11\12\1\1\11\15\1\1\11\2\1"+
    "\1\11\1\1\1\11\1\1\1\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\2\1\1\0\55\1\5\0\1\1"+
    "\3\0\2\11\1\1\1\0\53\1\1\0\36\1\1\0"+
    "\23\1\1\0\14\1\1\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
	public static boolean ASSERT_IS_KEYWORD = false;

	/* styles */
	
	public static final byte PLAIN_STYLE = 1;
	public static final byte KEYWORD_STYLE = 2;
	public static final byte TYPE_STYLE = 3;
	public static final byte OPERATOR_STYLE = 4;
	public static final byte SEPARATOR_STYLE = 5;
	public static final byte LITERAL_STYLE = 6;
	public static final byte JAVA_COMMENT_STYLE = 7;
	public static final byte JAVADOC_COMMENT_STYLE = 8;
	public static final byte JAVADOC_TAG_STYLE = 9;
	public static final byte INQUISITION_TAG_STYLE = 10;
	public static final byte INQUISITION_INPUT_STYLE = 11;


	/* Highlighter implementation */
	
	public int getStyleCount()
	{
		return 9;
	}
	
	public byte getStartState()
	{
		return YYINITIAL+1;
	}
	
	public byte getCurrentState()
	{
		return (byte) (yystate()+1);
	}
	
	public void setState(byte newState)
	{
		yybegin(newState-1);
	}
	
	public byte getNextToken()
	throws IOException
	{
		return (byte) yylex();
	}
	
	public int getTokenLength()
	{
		return yylength();
	}
	
	public void setReader(Reader r)
	{
		this.zzReader = r;
	}

	public JavaHighlighter()
	{
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaHighlighter(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaHighlighter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1674) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { yybegin(IN_COMMENT);  return JAVA_COMMENT_STYLE;
          }
        case 20: break;
        case 17: 
          { yybegin(IN_JAVA_DOC_COMMENT); return JAVADOC_COMMENT_STYLE;
          }
        case 21: break;
        case 6: 
          { return OPERATOR_STYLE;
          }
        case 22: break;
        case 13: 
          { return KEYWORD_STYLE;
          }
        case 23: break;
        case 2: 
          { return INQUISITION_INPUT_STYLE;
          }
        case 24: break;
        case 1: 
          { return INQUISITION_TAG_STYLE;
          }
        case 25: break;
        case 8: 
          { return JAVA_COMMENT_STYLE;
          }
        case 26: break;
        case 5: 
          { return SEPARATOR_STYLE;
          }
        case 27: break;
        case 11: 
          { yybegin(YYINITIAL); return INQUISITION_INPUT_STYLE;
          }
        case 28: break;
        case 19: 
          { yybegin(IN_INQUISITION_INPUT); return INQUISITION_INPUT_STYLE;
          }
        case 29: break;
        case 10: 
          { yybegin(YYINITIAL); return INQUISITION_TAG_STYLE;
          }
        case 30: break;
        case 18: 
          { return ASSERT_IS_KEYWORD ? KEYWORD_STYLE : PLAIN_STYLE;
          }
        case 31: break;
        case 4: 
          { return LITERAL_STYLE;
          }
        case 32: break;
        case 3: 
          { return PLAIN_STYLE;
          }
        case 33: break;
        case 16: 
          { yybegin(YYINITIAL); return JAVADOC_COMMENT_STYLE;
          }
        case 34: break;
        case 9: 
          { return JAVADOC_COMMENT_STYLE;
          }
        case 35: break;
        case 7: 
          { yybegin(IN_INQUISITION_TAG); return INQUISITION_TAG_STYLE;
          }
        case 36: break;
        case 12: 
          { return TYPE_STYLE;
          }
        case 37: break;
        case 15: 
          { yybegin(YYINITIAL); return JAVA_COMMENT_STYLE;
          }
        case 38: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
